通俗一点来讲，动态规划和其它遍历算法(如深/广度优先搜索)都是将原问题拆成多个子问题然后求解，
他们之间最本质的区别是，动态规划保存子问题的解，避免重复计算。解决动态规划问题的关键是找到状态转移方程，
这样我们可以通过计算和储存子问题的解来求解最终问题。

我们可以认为，动态规划=递归+记忆，也可以称作记忆化递归，

写动态规划的逻辑思路：（最简单的例子就是斐波那契数列）
    先想递归
    发现重复计算
    通过记忆化等方法弄掉重复计算
    最后看下能不能通过利用计算顺序来做到去掉递归用“刷表”方式直接顺序计算，能搞定最好搞不定拉倒


首先，虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解其实并不是一件容易的事，需要你熟练掌握递归思维，
只有列出正确的「状态转移方程」，才能正确地穷举。而且，你需要判断算法问题是否具备「最优子结构」，是否能够通过子问题的最值得到原问题的最值。
另外，动态规划问题存在「重叠子问题」，如果暴力穷举的话效率会很低，所以需要你使用「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。

以上提到的重叠子问题、最优子结构、状态转移方程就是动态规划三要素。

明确 base case -> 明确「状态」-> 明确「选择」 -> 定义 dp 数组/函数的含义。


# 自顶向下递归的动态规划
def dp(状态1, 状态2, ...):
    for 选择 in 所有可能的选择:
        # 此时的状态已经因为做了选择而改变
        result = 求最值(result, dp(状态1, 状态2, ...))
    return result

# 自底向上迭代的动态规划
# 初始化 base case
dp[0][0][...] = base case
# 进行状态转移
for 状态1 in 状态1的所有取值：
    for 状态2 in 状态2的所有取值：
        for ...
            dp[状态1][状态2][...] = 求最值(选择1，选择2...)


「状态转移方程」这个名词，实际上就是描述问题结构的数学形式